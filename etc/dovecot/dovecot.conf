## Dovecot configuration file

# "dovecot -n" command gives a clean output of the changed settings. Use it
# instead of copy&pasting this file when posting to the Dovecot mailing list.

# '#' character and everything after it is treated as comments. Extra spaces
# and tabs are ignored. If you want to use either of these explicitly, put the
# value inside quotes, eg.: key = "# char and trailing whitespace  "

# See http://wiki.dovecot.org/MainConfig for the available configuration
# directives and /usr/share/dovecot/dovecot.conf for a commented example. See
# http://hg.rename-it.nl/dovecot-1.2-managesieve/file/tip/README for
# configuration of the managesieve plugin/daemon.

# We serve IMAPS, managesieve and use the deliver Local Delivery Agent
protocols = imaps managesieve lda

# Disable LOGIN command and all other plaintext authentications unless
# SSL/TLS is used (LOGINDISABLED capability). Note that if the remote IP
# matches the local IP (ie. you're connecting from the same computer), the
# connection is considered secure and plaintext authentication is allowed.
disable_plaintext_auth = yes

##
## Logging
##

# Dovecot logs to syslog by default, using the mail facility.

# Prefix for each line written to log file. % codes are in strftime(3)
# format.
log_timestamp = "%Y-%m-%d %H:%M:%S "

# Enable debugging here
#auth_verbose = yes
#mail_debug = yes
#auth_debug = yes
#verbose_ssl = yes

##
## SSL settings
##

# PEM encoded X.509 SSL/TLS certificate and private key. They're opened before
# dropping root privileges, so keep the key file unreadable by anyone but
# root. The public key should include the (chain to the) root CA.
ssl_cert_file = /etc/ssl/certs/dovecot.pem
ssl_key_file = /etc/ssl/private/dovecot.pem

##
## Mailbox locations and namespaces
##

# Store mails in the Folders directory inside the user's "home" directory.
# Note that there is no real system user and there is no real homedir, it's
# just the directory that stores all the files for this mailbox.
mail_location = Maildir:~/Folders:LAYOUT=fs

# Deliver and access mails using a single system user, that is specifically
# used only for this purpose.
mail_uid = virtual-mail
mail_gid = virtual-mail

# Make sure also have the spamd-access additional group (dovecot does not load
# additional groups from /etc/group, so we need to specify it here explicitly).
# This group is used to access the spamd UNIX socket to train messages in the
# antispam plugin.
mail_access_groups = spamd-access

##
## IMAP specific settings
##

protocol imap {
  # Enable antispam (which automatically lets spamassassin train its Bayesian
  # filter when mail is moved into or out of a spamfolder).
  mail_plugins = antispam
 
  # Use this to log full IMAP conversations. See
  # http://wiki.dovecot.org/Debugging/Rawlog for additional setup needed.
  #mail_executable = /usr/lib/dovecot/rawlog /usr/lib/dovecot/imap
}

##
## LDA specific settings
##

protocol lda {
  # deliver wants a postmaster address to send bounces, but we've configured
  # Exim to only call deliver with -e, meaning exim will send the bounces.
  # Setting this to "" silences deliver.
  postmaster_address = ""

  # Enable sieve filters on delivery.
  mail_plugins = sieve
}

auth default {
  # LDAP binding only supports plain (which is safe when combined with SSL)
  mechanisms = plain

  # Both authentication and user info come from LDAP
  passdb ldap {
    args = /etc/dovecot/dovecot-ldap.conf
  }

  userdb ldap {
    args = /etc/dovecot/dovecot-ldap.conf
  }

  # Run auth process as nobody (since we don't access shadow, we don't need
  # root here).
  user = nobody

  # It's possible to export the authentication interface to other programs:
  socket listen {
    master {
      # Master socket provides access to userdb information. It's typically
      # used to give Dovecot's local delivery agent access to userdb so it
      # can find mailbox locations.
      path = /var/run/dovecot/auth-master
      # Enable access for dovecot-deliver
      mode = 0600
      user = virtual-mail
      group = virtual-mail
    }
    client {
      # The client socket is generally safe to export to everyone. Typical use
      # is to export it to your SMTP server so it can do SMTP AUTH lookups
      # using it.
      path = /var/run/dovecot/auth-client
      # Only exim needs to use this socket, so limit access anyway.
      mode = 0600
      user = Debian-exim
      group = Debian-exim
    }
  }
}

##
## Plugin settings
##

plugin {
  #############################################################################
  # Sieve plugin (http://wiki.dovecot.org/LDA/Sieve) and ManageSieve service
  #############################################################################
  
  # Location of the active script. When ManageSieve is used this is actually 
  # a symlink pointing to the active script in the sieve storage directory. 
  sieve=~/sieve

  # The path to the directory where the personal Sieve scripts are stored. For 
  # ManageSieve this is where the uploaded scripts are stored.
  sieve_dir=~/sieve.d

  #############################################################################
  # Antispam plugin
  #############################################################################
  
  # Trash mailboxes. When moving mails into or out of these, don't do any
  # training (so mail won't get trained as ham when users move them to thrash
  # from their spam mailbox).
  antispam_trash_pattern_ignorecase = trash;Deleted *;Prullenbak;Verwijderde *

  # Spam mailboxes. When moving mails into or out of these, they are trained as
  # spam or ham respectively. These mailbox names are intentionally very
  # non-standard, so only expert users that configure a Sieve filter to move
  # their spam into these folders at delivery time will get to use
  # dovecot-antispam.
  # If we would use a common "Spam" folder, without forcing users to use
  # server-side spam filtering, people with clients that do client side spam
  # filtering (e.g, downloading messages and then moving spam into the Spam
  # folder), this would lead to _every_ spam message being trained as spam,
  # instead of just the false negatives. This is expected to greatly reduce the
  # usefulness of this training, so we try to prevent that. Even if just a
  # handful of expert users trains the filter, that should improve the filter
  # enough (since there is a common Bayes database shared between all users).
  antispam_spam_ignorecase = Oubliette;Attic

  # Use spamc to tell spamd to train messages. We use this approach instead of
  # calling sa-learn, since now only spamd needs write access to the bayes
  # database, which simplifies things.
  antispam_backend = pipe
  antispam_pipe_program = /usr/bin/spamc
  antispam_pipe_program_args = --socket=/var/run/spamd.socket
  antispam_pipe_program_spam_arg = --learntype=spam
  antispam_pipe_program_notspam_arg = --learntype=ham

  # Enable debugging here (though it doesn't seem to output anything?)
  #antispam_debug_target = syslog
  #antispam_verbose_debug = 1
}

# vim: set sts=2 sw=2 expandtab autoindent:
