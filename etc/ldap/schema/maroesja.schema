# Custom schema for our LDAP directory. This defines only custom
# objectclasses, the relevant attributes are reused from other schema.
# Having a custom schema ensures that we can enforce our local rules and
# not have all those extra attributes available which we'll never use.
#
# A lot of the ideas in this schema are taken from the paper "LDAP
# Schema Design", by Andrew Findlay.
# http://www.skills-1st.co.uk/papers/ldap-schema-design-feb-2005/ldap-schema-design-feb-2005.pdf


# Oid for the "stderr.nl" organization, owned by Matthijs Kooijman. Do not use
# this OID or these objectclasses without contacting Matthijs, since they may
# change without notice!
objectIdentifier StdErr 1.3.6.1.4.1.33232
# StdErr:2 has been used in a previous attempt at a custom schema and
# should no longer be used.
objectIdentifier StdErrLDAP StdErr:3
objectIdentifier StdErrAttributeType StdErrLDAP:1
objectIdentifier StdErrObjectClass StdErrLDAP:2

# Note that the entryUUID attribute, used in all structural
# objectclasses below, is really an operation attribute defined by
# rfc4530 and is present in all objects, regardless of this schema.
# However, since we intend to use it as the rdn, we specify it
# explicitly in the objectclasses here for clarity.

########################################################################
# Attribute types
########################################################################
# Most of these have been copied from other schema, since the LDAP
# backends of most tools are usually hardcoded (or at least defaulted)
# to these attribute names. Also, why reinvent these attributes when the
# existing ones suffice just fine?
#
# We did copy them here to prevent having to pull in all of the other
# schema files, including all the crap we don't use.

# attributeTypes not present, because they are system schema or builtin:
# userPassword, uid, uidNumber, gidNumber, commonName, description.

# A domain name used to identify a dns domain
attributetype ( StdErrAttributeType:1 NAME ( 'domainName' )
	EQUALITY caseIgnoreIA5Match
	SUBSTR caseIgnoreIA5SubstringsMatch
	SYNTAX 1.3.6.1.4.1.1466.115.121.1.26 SINGLE-VALUE )

# Taken from http://blogs.mnt.se/?p=10

attributeType ( 1.2.752.43.9.1.1
	NAME 'jabberID'
	DESC 'The Jabber ID(s) associated with this object. Used to map a JID to an LDAP account.'
	EQUALITY caseIgnoreMatch
	SYNTAX 1.3.6.1.4.1.1466.115.121.1.15 )


# Taken from core.schema

#attributetype ( 2.5.4.42 NAME ( 'givenName' 'gn' )
#	DESC 'RFC2256: first name(s) for which the entity is known by'
#	SUP name )
# 
#attributetype ( 2.5.4.4 NAME ( 'sn' 'surname' )
#	DESC 'RFC2256: last (family) name(s) for which the entity is known by'
#	SUP name )
# 
#attributetype ( 2.5.4.31 NAME 'member'
#	DESC 'RFC2256: member of a group'
#	SUP distinguishedName )
# 
#attributetype ( 2.5.4.32 NAME 'owner'
#	DESC 'RFC2256: owner (of the object)'
#	SUP distinguishedName )
# 
#attributetype ( 0.9.2342.19200300.100.1.3
#	NAME ( 'mail' 'rfc822Mailbox' )
#	DESC 'RFC1274: RFC822 Mailbox'
#	EQUALITY caseIgnoreIA5Match
#	SUBSTR caseIgnoreIA5SubstringsMatch
#	SYNTAX 1.3.6.1.4.1.1466.115.121.1.26{256} )
# 
#attributetype ( 2.5.4.20 NAME 'telephoneNumber'
#	DESC 'RFC2256: Telephone Number'
#	EQUALITY telephoneNumberMatch
#	SUBSTR telephoneNumberSubstringsMatch
#	SYNTAX 1.3.6.1.4.1.1466.115.121.1.50{32} )

# Taken from cosine.schema

#attributetype ( 0.9.2342.19200300.100.1.9 NAME 'host'
#	DESC 'RFC1274: host computer'
#	EQUALITY caseIgnoreMatch
#	SUBSTR caseIgnoreSubstringsMatch
#	SYNTAX 1.3.6.1.4.1.1466.115.121.1.15{256} )
#
#attributetype ( 0.9.2342.19200300.100.1.44 NAME 'uniqueIdentifier'
#	DESC 'RFC1274: unique identifer'
#	EQUALITY caseIgnoreMatch
#	SYNTAX 1.3.6.1.4.1.1466.115.121.1.15{256} )

# Taken from inetorgperson.schema

# When displaying an entry, especially within a one-line summary list, it
# is useful to be able to identify a name to be used.  Since other attri-
# bute types such as 'cn' are multivalued, an additional attribute type is
# needed.  Display name is defined for this purpose.

#attributetype ( 2.16.840.1.113730.3.1.241
#	NAME 'displayName'
#	DESC 'RFC2798: preferred name to be used when displaying entries'
#	EQUALITY caseIgnoreMatch
#	SUBSTR caseIgnoreSubstringsMatch
#	SYNTAX 1.3.6.1.4.1.1466.115.121.1.15
#	SINGLE-VALUE )

# Taken from nis.schema

#attributetype ( 1.3.6.1.1.1.1.3 NAME 'homeDirectory'
#	DESC 'The absolute path to the home directory'
#	EQUALITY caseExactIA5Match
#	SYNTAX 1.3.6.1.4.1.1466.115.121.1.26 SINGLE-VALUE )
# 
#attributetype ( 1.3.6.1.1.1.1.4 NAME 'loginShell'
#	DESC 'The path to the login shell'
#	EQUALITY caseExactIA5Match
#	SYNTAX 1.3.6.1.4.1.1466.115.121.1.26 SINGLE-VALUE )
# 
# Taken from qmail.schema

 attributetype ( 1.3.6.1.4.1.7914.1.2.1.4 NAME 'mailAlternateAddress'
 DESC 'Secondary (alias) mailaddresses for the same user'
 EQUALITY caseIgnoreIA5Match
 SUBSTR caseIgnoreIA5SubstringsMatch
 SYNTAX 1.3.6.1.4.1.1466.115.121.1.26{256} )

 attributetype ( 1.3.6.1.4.1.7914.1.2.1.6 NAME 'mailHost'
 DESC 'On which qmail server the messagestore of this user is located.'
 EQUALITY caseIgnoreIA5Match
 SUBSTR caseIgnoreIA5SubstringsMatch
 SYNTAX 1.3.6.1.4.1.1466.115.121.1.26{256} SINGLE-VALUE)

 attributetype ( 1.3.6.1.4.1.7914.1.2.1.7 NAME 'mailForwardingAddress'
 DESC 'Address(es) to forward all incoming messages to.'
 EQUALITY caseIgnoreIA5Match
 SUBSTR caseIgnoreIA5SubstringsMatch
 SYNTAX 1.3.6.1.4.1.1466.115.121.1.26{256} )

 attributetype ( 1.3.6.1.4.1.7914.1.3.1.2 NAME 'rfc822member'
 DESC 'Group member specified as normal rf822 email address.'
 EQUALITY caseIgnoreIA5Match
 SUBSTR caseIgnoreIA5SubstringsMatch
 SYNTAX 1.3.6.1.4.1.1466.115.121.1.26{256} )

# A person. Any person that has any access in the system has a person
# object. A person object should have no further object classes, but
# should have subordinate identity objects that define the various
# identities and corresponding system access for this person.
#
# The contact info in this class represents external contact info to
# contact this user in case of service disruption. In particular, the
# email server does not use this email address for delivery or
# forwarding.
#
# Note that this is a different object class from the 'person' defined
# in RFC2256 (oid 2.5.6.6).
objectclass ( StdErrObjectClass:1
	NAME 'maroesjaPerson'
	SUP top
	STRUCTURAL
	MUST ( uniqueIdentifier $ displayName $ cn $ givenName $ sn)
	MAY ( mail $ telephoneNumber ) )

# A person's account. Any person can have multiple different account
# objects, which should be below the person in the tree. An account can
# work on one or more subsystems (SSH, mail, jabber, etc.). These
# systems are modeled as additional auxiliary classes that can be added.
# When possible, attributes (such as username or password) are shared
# between the different subsystems.
#
# Persons will commonly have just a single identity with a few
# objectclasses, meaning they have a single username and passwords to
# log in to all systems.
#
# Alternatively, persons can have multiple identities, for example to
# separate their work and private stuff, or just to have multiple
# different email addresses and boxes, etc.
#
# Note that this is a different object class from the 'account' defined
# in cosine.schema (oid 0.9.2342.19200300.100.4.5).
objectclass ( StdErrObjectClass:2
	NAME 'maroesjaAccount'
	SUP top
	STRUCTURAL
	MUST ( uniqueIdentifier $ displayName )
	MAY ( description ) )

# An identity which can receive mail. The mail and
# mailAlternateAddresses define the public addresses for which mail
# should be delivered to this identity. The destination of this mail is
# defined by the subclass(es) used (since mailIdentity is abstract, it
# can never occur alone). Note that it is perfectly acceptable for a
# single identity to use both mailForwardIdentity and
# mailDeliverIdentity when mail should be delivered as well as
# forwarded.
# Also note that both mail and mailAlternateAddress are optional. This allows
# for having an identity that has no public email addresses of its own, but
# receives its mail through group memberships only.
objectclass ( StdErrObjectClass:3
	NAME 'maroesjaMailIdentity'
	SUP top
	ABSTRACT
	MAY ( mail $ mailAlternateAddress ) )

# Mail for this identity should be forwarded to some other address (or
# addresses). This is typically an external email address (e.g. gmail),
# either as the main mailbox for this identity or as an external backup
# (when a mailDeliverIdentity is also used). However, it is perfectly
# legal to specify an email address here that is handled by this
# mailserver as well.
objectclass ( StdErrObjectClass:4
	NAME 'maroesjaMailForwardIdentity'
	SUP maroesjaMailIdentity
	AUXILIARY
	MUST ( mailForwardingAddress ) 
	MAY ( ) )

# Mail for this identity should be delivered to a mailbox on the given
# host. Typically, there is only a single mailserver that handles all
# mail, making mailHost essentially just a dummy attribute that always
# has the same value). However, this does allow scaling to multiple
# mailservers, if the MX records for the involved domains are properly
# set up and/or the mailservers are configured to forward the e-mail
# correctly to the handling server.
#
# A uid can be specified to allow logging in using a username, in
# addition to the main email address (from the mail attribute).
objectclass ( StdErrObjectClass:5
	NAME 'maroesjaMailDeliverIdentity'
	SUP maroesjaMailIdentity
	AUXILIARY
	MUST ( mailHost $ userPassword )
	MAY ( uid ) )

# This identity represents a Linux system user, which has a username,
# uid, homedir, etc.
# This system user does not necessarily need to be able to login, the
# systemLoginIdentity subclass should be used to allow logins.
# Login-less users can be useful as users to run webapplications under,
# for example,
#
# In addition to a user, this object also represents its own primary group.
#
# Note that there is no gecos property, libnss-ldap is configured to use
# displayName for that (which isn't technically correct, since gecos can
# contain multiple comma-separated values, but who uses the extra info
# like room number and telephone number anyway?).
objectclass ( StdErrObjectClass:6
	NAME 'maroesjaSystemIdentity'
	SUP top
	AUXILIARY
	MUST ( uid $ cn $ uidNumber $ gidNumber $ homeDirectory )
	MAY ( ) )

# This identity represents a Linux system user that should be able to
# login using SSH. The host attribute defines on which hosts login is
# allowed (it is optional so a user can be temporarily or permanently
# forbidden to log in without removing this objectclass entirely).
objectclass ( StdErrObjectClass:7
	NAME 'maroesjaSystemLoginIdentity'
	SUP maroesjaSystemIdentity
	AUXILIARY
	MUST ( userPassword $ loginShell )
	MAY ( host ) )

# This identity allows login to the Maroesja frontend.
objectclass ( StdErrObjectClass:8
	NAME 'maroesjaMaroesjaIdentity'
	SUP top
	AUXILIARY
	MUST ( uid $ userPassword )
	MAY ( ) )

# This identity allows a user to login to the jabber server. The
# jabberId contains the full jid (username+domain).
objectclass ( StdErrObjectClass:9
	NAME 'maroesjaJabberIdentity'
	SUP top
	AUXILIARY
	MUST ( jabberID $ userPassword )
	MAY ( ) )

# A group. This is any group of things, though usually it will be a group of
# people. Does not have any particular meaning by itself, but auxillary classes
# from below can be added to make this group a unix group, mail alias, etc.
#
# This is similar to groupOfNames, but the member attribute is optional,
# allowing for an empty group (which groupOfNames doesn't allow).
# Also, it adds a displayName and removes some other attributes.
objectclass ( StdErrObjectClass:10
	NAME 'maroesjaGroup'
	SUP top
	STRUCTURAL
	MUST ( uniqueIdentifier $ displayName $ cn $ owner )
	MAY ( member $ description ) )

# A group that should become a Linux system group.
#
# This is similar to posixGroup, but it is an auxillary class instead of
# structural, so it can be used together with the structural group
# class. Also, it doesn't define a memberUid, since we define all
# memberships using member (reference to dn) only.
objectclass ( StdErrObjectClass:11
	NAME 'maroesjaSystemGroup'
	SUP top
	AUXILIARY
	MUST ( cn $ gidNumber )
	MAY ( description ) )

# A mail group. This has a number of mail addresses (mail and
# mailAlternateAddresses). Mail to these addresses should be delivered
# to each rf822member and uniqueMember.
objectclass ( StdErrObjectClass:12
	NAME 'maroesjaMailGroup'
	SUP top
	AUXILIARY
	MUST ( mail )
	MAY ( mailAlternateAddress $ rfc822member $ member ) )

# This object represents a domain and has the sole purpose of recording
# the owner(s) of a domain for authorization purposes in the Maroesja
# frontend.
objectclass ( StdErrObjectClass:13
	NAME 'maroesjaDomain'
	SUP top
	STRUCTURAL
	MUST ( uniqueIdentifier $ owner $ domainName $ displayName )
	MAY ( description ) )

# A system account or group (e.g., the account that dovecot uses to access
# mails). This is used for accounts and groups that should not be managed using
# Maroesja, but are created in the LDAP directory manually.
#
# Add maroesjaSystemIdentity and/or maroesjaSystemGroup to actually turn this
# into a user and/or group.
objectclass ( StdErrObjectClass:14
	NAME 'maroesjaSystemAccount'
	SUP top
	STRUCTURAL
	MUST ( uniqueIdentifier $ displayName) )
