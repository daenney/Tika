#!/usr/bin/env python3
# This script will:
#  * Create directories for the logfiles, since nginx cannot do this.
#  * Generate awstats configuration files to parse each log file.
#  * Run awstats to process all current logfiles or
#  * When --after-logrotate is given, run awstats to process the just rotated
#    logfiles.
# For the last part, it is assumed that logrotate is configured with dateext,
# without olddir and, until http://bugs.gentoo.org/106651 is fixed, with
# delaycompress.
#
# Note that running without --after-logrotate is no longer needed, since
# awstats supplies its own cronjob to update statistics every 10
# minutes.

import re, os, sys, pwd, datetime, subprocess, collections;

nginx_config_dir = '/etc/nginx/sites-enabled'
nginx_vhost_re = re.compile(r'^\s*server_name\s+(\S+)(\s+\S+)*;$')
split_vhost_re = re.compile(r'^(?:(.*)\.)?([^.]+\.[^.]+)$')
simple_vhost_re = re.compile(r'^[a-zA-Z0-9_.-]+$')
logs_dir = '/data/www/logs'
# The directory with awstats configuration files
awstats_dir = '/etc/awstats'
# The template for each awstats configuration file. %s is replaced with the
# full domain name the configuration is for
awstats_config_file = 'awstats.%s.conf'
# Let each awstats config file include this file
awstats_common_file = os.path.join(awstats_dir, 'common.conf')
# Filename for the log files
log_file = 'access.log'
# Directory for domains we didn't find
other_dir = 'other'
awstats = '/usr/lib/cgi-bin/awstats.pl'
# Use sudo to run awstats as this user
awstats_user = pwd.getpwnam('www-data').pw_uid
# The dateformat option as used by logrotate. This is the default.
dateformat = '-%Y%m%d'

header = """
# This config file was autogenerated by {}. Do not change it
# directly, since it will be periodically regenerated.

""".format(sys.argv[0])

domains = collections.defaultdict(list)

# Find out the domains we need
for config in os.listdir(nginx_config_dir):
  #print(config)
  with open(os.path.join(nginx_config_dir, config)) as f:
    for line in f:
      match = nginx_vhost_re.match(line)
      if not match:
        continue

      (vhost, aliases) = match.groups('')

      match = split_vhost_re.match(vhost)
      if not match or not simple_vhost_re.match(vhost):
        #print("Skipping non-trivial vhost: {}".format(vhost))
        continue

      (sub, domain) = match.groups('')

      #print("\t{}".format(vhost))

      domains[domain].append((sub, vhost, aliases.split()))

# Write awstats configuration
for (d, subdomains) in domains.items():
  for (s, primary, aliases) in subdomains:
      subdomain_logfile = os.path.join(logs_dir, d, s, log_file)

      # Only generate awstats configuration for real paths, not symlinks
      awstats_conf = header
      awstats_conf += 'LogFile="{}"\n'.format(subdomain_logfile)
      awstats_conf += 'SiteDomain="{}"\n'.format(primary)
      awstats_conf += 'HostAliases="{} {}"\n'.format(primary, ' '.join(aliases))
      awstats_conf += 'Include "{}"\n'.format(awstats_common_file)

      # Write out the awstats config file
      subdomain_awstats_file = os.path.join(awstats_dir, awstats_config_file % primary)

      #print("Writing {}".format(subdomain_awstats_file))
      with open(subdomain_awstats_file , 'w') as out:
        out.write(awstats_conf)

def create_dir(dirname):
  if not os.path.isdir(dirname):
    #print("Creating {}".format(dirname))
    os.mkdir(dirname)
    # Chown to awstats_user, keep gid
    os.chown(dirname, awstats_user, os.stat(dirname).st_gid)

# Create directories for the logfiles, nginx doesn't do this
for (d, subdomains) in domains.items():
  create_dir(os.path.join(logs_dir, d))
  for (s, primary, aliases) in subdomains:
    create_dir(os.path.join(logs_dir, d, s))
    # ensure access.log exists
    f = os.path.join(logs_dir, d, s, 'access.log')
    open(f, 'a').close()
    # Chown to awstats_user, keep gid
    os.chown(f, awstats_user, os.stat(f).st_gid)


# Now, run awstats to parse log files.
if len(sys.argv) > 1 and sys.argv[1] == '--after-logrotate':
  # Logs have just been rotated, so update "todays" log. We make a guess at
  # logrotate's date extension (which shouldn't be a guess, unless logrotate's
  # dateformat was modified).
  dateext = datetime.date.today().strftime(dateformat)
else:
  dateext = ''

for (d, subdomains) in domains.items():
  for (s, primary, aliases) in subdomains:
    subdomain_logfile = os.path.join(logs_dir, d, s, log_file + dateext)

    # Call awstats. We explicitly pass in a LogFile, in case --after-logrotate
    # is given. The config parameter points to the middle part of the
    # configuration file name, awstats adds the root dir and awstats.%s.conf
    # part. We check if the file exists, since rotation might not have been
    # happened (when the file was empty, for example)
    if os.path.exists(subdomain_logfile):
      try:
        subprocess.check_output(
                      [ 'sudo'
                      , '-u', '#{}'.format(awstats_user)
                      , awstats
                      , '-config={}'.format(primary)
                      , '-update'
                      , '-LogFile={}'.format(subdomain_logfile)
                      ], stderr=subprocess.STDOUT)
      except subprocess.CalledProcessError as e:
          msg = "Running awstats for {} failed with exit status {}\n"
          sys.stderr.write(msg.format(primary, e.returncode))
          if e.output:
            sys.stderr.write("Output:\n")
            sys.stderr.buffer.write(e.output)
          else:
            sys.stderr.write("No output\n")
# vim: set sw=2 sts=2 expandtab autoindent:
